volatile java虚拟机提供的轻量级的同步机制（乞丐版本的sync）
1.可见性 ：在写入共享内存数据（被修改）时候，通知其他的线程这个数据被修改了，这种通知机制被叫做可见性
2.不不不保证原子性 ： 和事务原子差不多，要么同是成功要么同时失败，数据的完整一致。造成写覆盖
3.禁止指令重排 happendbefore  多线程环境中线程交替进行，存在编译器优化重排，会造成一致性是无法确定的。通过内存屏障，禁止指令重排，强制刷出cpu的缓存数据，读到最新的数据


JMM 内存模型(不是真实存在的)：  主内存（内存共享），各线程的工作内存（栈，私有）
可见 volatile
原子 sync
有序 volatile


sync和lock 区别：

构成上：
sync是关键字，系统级别，属于jvm层面，是基于monitorenter，monitorexit实现的，底层是通过monitor对象实现的，
            wait和notify也是通过monitor实现的，只有在同步块和方法中才能调用wait和notify，
            两次monitorexit保证不会死锁，退出了两次
lock是具体的类

使用方法：
lock需要手动关闭，否则会造成死锁，一般try  catch finally实现。sync不需要

等待是否可中断：
sync除非完成或者抛异常，不然不能中断
lock是可以的

锁的类别：
sync非公平
lock看具体实现，两者都可以

锁绑定多个condition
sync没有
lock可以，不是和sync一样唤醒一个或者全部，精确唤醒

